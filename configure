#! /bin/bash

print_to_file ()
{
    echo "$1" >> .config_vars
}

print_to_stderr ()
{
    echo "$1" 1>&2
}

version_min ()
{
    # Compare $1 and $2 as version numbers and return the smallest
    ( echo "$1"; echo "$2" ) | sort -V | head -n 1
}

version_leq ()
{
    # Check that $1 <= $2 where <= is ordering between version numbers
    if [ "$1" = $(version_min "$1" "$2") ]
    then
        return 0
    else
        print_to_stderr ""
        print_to_stderr "ERROR: version constraint not satisfied: $1 <= $2"
        return 1
    fi
}

version_geq ()
{
    # Check that $1 >= $2 where >= is ordering between version numbers
    version_leq "$2" "$1"
}

version_lt ()
{
    # Check that $1 < $2 where < is ordering between version numbers
    if [ "$2" = $(version_min "$1" "$2") ]
    then
        print_to_stderr ""
        print_to_stderr "ERROR: version constraint not satisfied: $1 < $2"
        return 1
    fi
}

version_eq ()
{
    # Check that $1 and $2 are equal version numbers
    if [ "$1" = "$2" ]
    then
        return 0
    else
        print_to_stderr ""
        print_to_stderr "ERROR: version constraint not satisfied: $1 = $2"
        return 1
    fi
}

declare -A VARS
declare -A VERSIONS

find_binary () {
    # $1 is the name of the binary
    # $2 is an optional extension to be used when we fallback to using
    # locate

    # Start by looking in path
    print_to_stderr "Looking for program '$1' in PATH."
    A=$(which "$1")
    if [ -n "$A" ]
    then
        print_to_stderr "Program '$1' found in PATH at \"$A\"."
        echo "$A"
        return 0
    # else use locate
    else
        print_to_stderr "Program '$1' not found in PATH, trying with locate."
        A=$(locate "$1$2" | head -n 1)
        if [ -n "$A" ]
        then
            print_to_stderr "Program '$1$2' found using locate at \"$A\"."
            echo "$A"
            return 0
        else
            print_to_stderr ""
            print_to_stderr "ERROR: Program '$1$2' not found."
            return 1
        fi
    fi
}

find_optional_binary () {
    # $1 is the name of the binary
    # $2 is an optional extension to be used when we fallback to using
    # locate
    # If the program is not found, we use ":" instead

    # Start by looking in path
    print_to_stderr "Looking for program '$1' in PATH."
    A=$(which "$1")
    if [ -n "$A" ]
    then
        print_to_stderr "Program '$1' found in PATH at \"$A\"."
        echo "$A"
        return 0
    # else use locate
    else
        print_to_stderr "Program '$1' not found in PATH, trying with locate."
        A=$(locate "$1$2" | head -n 1)
        if [ -n "$A" ]
        then
            print_to_stderr "Program '$1$2' found using locate at \"$A\"."
            echo "$A"
            return 0
        else
            print_to_stderr ""
            print_to_stderr "Warning: Optional program '$1$2' not found."
            echo ":"
            return 0
        fi
    fi
}


find_binary_and_version () {
    # $1 and $2 are arguments to find_binary
    # $3 is the variable name
    # $4 is the option to pass to the program to ask for its version
    A=$(find_binary $1 $2)
    VARS[$3]="$A"
    VERSION_COMMAND="$A $4"
    print_to_stderr "Asking '$1' for its version number."
    B=$(eval $VERSION_COMMAND |& cat)
    print_to_stderr "Program '$1' has version '$B'."
    VERSIONS[$3]="$B"
    print_to_file "$3=\"$A\""
}

echo -n > .config_vars &&

# Core
## Dedukti
find_binary_and_version "dkcheck" ".native" "DEDUKTI" "-version | cut -d ' ' -f 2" &&
version_geq "${VERSIONS["DEDUKTI"]}" "v2.5" &&
version_lt "${VERSIONS["DEDUKTI"]}" "v2.6" &&
print_to_file "COQC=\"$(find_optional_binary 'coqc' '')\"" &&
print_to_file "TWELFSERVER=\"$(find_optional_binary 'twelf-server' '')\"" &&
find_binary_and_version "ocamlbuild" "" "OCAMLBUILD" "-version" &&
find_binary_and_version "opentheory" "" "OPENTHEORY" "-v | cut -d ' ' -f 2" &&
version_eq "${VERSIONS["OPENTHEORY"]}" "1.3" &&
print_to_stderr "" &&
print_to_stderr "Configuration successful, please invoke make" &&
print_to_stderr ""
